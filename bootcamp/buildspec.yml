version: 0.2

env:
  variables:
    REGISTRY_URL: 660656973203.dkr.ecr.eu-west-1.amazonaws.com
    APP: spotify
    ECR_APP: spotify
    TAG: v1.0_
    COMMIT_ID: commit
    NAMESPACE: d4i
    EKS_CLUSTER:
    EKS_CLUSTER_DEV: Ekswk2v1DEVV1
    EKS_CLUSTER_PRE: Ekswk2v1DEVV1
    EKS_CLUSTER_PROD: Ekswk2v1DEVV1
    EKS_MASTER_ROLE:
    EKS_MASTER_ROLE_DEV: arn:aws:iam::177734401659:role/rle.eks.clusterRole.globick.dev.v1
    EKS_MASTER_ROLE_PRE: arn:aws:iam::177734401659:role/rle.eks.clusterRole.globick.dev.v1
    EKS_MASTER_ROLE_PROD: arn:aws:iam::177734401659:role/rle.eks.clusterRole.globick.dev.v1
    AWS_REGION: Spain
    BRANCH_NAME: develop
    CHARTHELM: 0
    ENVIROMENT: DEV_

phases:
  install:
    commands:
      - echo Entered the install phase...
      - curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.17.9/2020-08-04/bin/darwin/amd64/kubectl
      - chmod +x ./kubectl
      - mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
      - curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

  pre_build:
    commands:
      - echo Entered the prebuild phase...
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $REGISTRY_URL
      - export COMMIT_ID=`git rev-parse --short origin/$GIT_BRANCH`
      - export BRANCH_NAME="$GIT_BRANCH"
      - |
        if [ "$BRANCH_NAME" = "develop" ] ; then
          export ENVIROMENT="DEV_"
        fi
      - |
        if [ "$BRANCH_NAME" = "release" ] ; then
          export ENVIROMENT="PRE_"
        fi
      - |
        if [ "$BRANCH_NAME" = "master" ] ; then
          export ENVIROMENT="PROD_"
        fi
      - export TAG="$ENVIROMENT$TAG$COMMIT_ID"

  build:
    commands:
      - echo Entered the build phase...
      - echo $BRANCH_NAME
      - |
        if [ "$BRANCH_NAME" = "develop" ] ; then
          mvn clean install -DskipTest
          echo Execute build over develop branch
          echo $REGISTRY_URL/$ECR_APP:$TAG
          docker build -t $REGISTRY_URL/$ECR_APP:$TAG -f Dockerfile-aws .
          export EKS_CLUSTER="$EKS_CLUSTER_DEV"
          export EKS_MASTER_ROLE="$EKS_MASTER_ROLE_DEV"
        fi
      - |
        if [ "$BRANCH_NAME" = "release" ] ; then
          mvn clean install -DskipTest
          echo Execute build over develop branch
          echo $REGISTRY_URL/$ECR_APP:$TAG
          docker build -t $REGISTRY_URL/$ECR_APP:$TAG -f Dockerfile-aws .
          export EKS_CLUSTER="$EKS_CLUSTER_PRE"
          export EKS_MASTER_ROLE="$EKS_MASTER_ROLE_PRE"
        fi
      - |
        if [ "$BRANCH_NAME" = "master" ] ; then
          mvn clean install -DskipTest
          echo Execute build over master branch
          echo $REGISTRY_URL/$ECR_APP:$TAG
          docker build -t $REGISTRY_URL/$ECR_APP:$TAG -f Dockerfile-aws .
          export EKS_CLUSTER="$EKS_CLUSTER_PROD"
          export EKS_MASTER_ROLE="$EKS_MASTER_ROLE_PROD"
        fi

  post_build:
    commands:
      - docker push $REGISTRY_URL/$ECR_APP:$TAG
      - echo $BRANCH_NAME
      - aws eks update-kubeconfig --name $EKS_CLUSTER --role-arn $EKS_MASTER_ROLE --verbose
      - export CHARTHELM=`helm ls -n $NAMESPACE | grep -i -c $APP`
      - echo $CHARTHELM
      - |
        if [ "$CHARTHELM" = 0 ] ; then
          echo install helm
          helm install $APP deploy/ -f deploy/values.yaml --set deployment.app=$APP --set deployment.image=$REGISTRY_URL/$ECR_APP --set deployment.tag=$TAG  -n $NAMESPACE
        fi
      - |
        if [ "$CHARTHELM" = 1 ] ; then
          echo upgrade helm
          helm upgrade --install $APP deploy/ -f deploy/values.yaml --set deployment.app=$APP --set deployment.image=$REGISTRY_URL/$ECR_APP --set deployment.tag=$TAG  -n $NAMESPACE
        fi
